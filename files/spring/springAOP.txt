纵向抽取：继承；横向抽取：切面。
AOP的理念：就是将分散在各个业务逻辑代码中相同的代码通过横向切割的方式抽取到一个独立的模块中！
spring aop的实现就是使用jdk动态代理的技术实现的。代理可以帮我们增强对象的行为！使用动态代理实质上就是调用时拦截对象方法，对方法进行改造、增强！

aop术语
1.join point(连接点) 被代理类中的所有方法的统称。
能够被拦截的地方：Spring AOP是基于动态代理的，所以是方法拦截的。每个成员方法都可以称之为连接点~
2.pointcut(切点) 因为代理类反射出内代理类的所有方法，拦截的这些方法并不都需要做处理，需要做处理的用pointcut做个标记，用标记筛选出需要做处理的。
具体定位的连接点：上面也说了，每个方法都可以称之为连接点，我们具体定位到某一个方法就成为切点。
3.增强/通知(Advice)：用pointcut筛选出需要做处理的连接点，通过使用不同的通知方法来达到对这些方法做出处理的目的。
表示添加到切点的一段逻辑代码，并定位连接点的方位信息。
简单来说就定义了是干什么的，具体是在哪干
Spring AOP提供了5种Advice类型给我们：前置、后置、返回、异常、环绕给我们使用。
4.织入(Weaving)：
将增强/通知添加到目标类的具体连接点上的过程。
5.引入/引介(Introduction)：
引入/引介允许我们向现有的类添加新方法或属性。是一种特殊的增强！
6.切面(Aspect)：
切面由切点和增强/通知组成，它既包括了横切逻辑的定义、也包括了连接点的定义。

Spring提供了3种类型的AOP支持：
1.基于代理的经典SpringAOP，需要实现接口，手动创建代理。
2.纯POJO切面，使用XML配置，aop命名空间。
3.@AspectJ注解驱动的切面，使用注解的方式，这是最简洁和最方便的！
