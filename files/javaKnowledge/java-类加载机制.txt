ClassLoader：
大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，
当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，
所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。
而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，
从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。

java提供三种类加载：
1.BootStrap ClassLoader:启动类加载器，是java类加载中最上层的类加载器，负责加载jdk的核心类库，如：rt.jar、resources.jar、charsets.jar等。
可通过如下程序获得该类加载器从哪些地方加载了相关的jar或class文件：
    public static void main(String[] args) {
    	URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();
    	for (int i = 0; i < urls.length; i++) {
    		System.out.println(urls[i].toExternalForm());
    	}
    }
结果如下：
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/resources.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/rt.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/sunrsasign.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/jsse.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/jce.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/charsets.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/jfr.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/classes
其实上述结果也是通过查找sun.boot.class.path这个系统属性所得知的。
2.Etension ClassLoader:扩展类加载器，负责加载java的扩展库，默认加载JAVA_HOME/jre/lib/ext/目下的所有jar。
3.App ClassLoader:系统类加载器，负责加载应用程序classpath下的所有jar和class文件。

注意： 除了Java默认提供的三个ClassLoader之外，用户还可以根据需要定义自已的ClassLoader，而这些自定义的ClassLoader都必须继承自java.lang.ClassLoader类，
也包括Java提供的另外二个ClassLoader（Extension ClassLoader和App ClassLoader）在内，但是Bootstrap ClassLoader不继承自ClassLoader，
因为它不是一个普通的Java类，底层由C++编写，已嵌入到了JVM内核当中，当JVM启动后，Bootstrap ClassLoader也随着启动，负责加载完核心类库后，并构造Extension ClassLoader和App ClassLoader类加载器。

类加载器的步骤：
Loading：类的信息从文件中获取并且载入到JVM的内存（方法区，常量区）里。如下：
加载阶段是“类加载机制”中的一个阶段，这个阶段通常也被称作“装载”，主要完成：
1.通过“类全名”来获取定义此类的二进制字节流。
2.将字节流所代表的静态存储结构转换为方法区的运行时数据结构。
3.在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。
相对于类加载过程的其他阶段，加载阶段(准备地说，是加载阶段中获取类的二进制字节流的动作)是开发期可控性最强的阶段，因为加载阶段可以使用系统提供的类加载器(ClassLoader)来完成，
也可以由用户自定义的类加载器完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式。
加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式有虚拟机实现自行定义，
虚拟机并未规定此区域的具体数据结构。然后在java堆中实例化一个java.lang.Class类的对象，这个对象作为程序访问方法区中的这些类型数据的外部接口。

Verifying：检查读入的结构是否符合Java语言规范以及JVM规范的描述。这是类装载中最复杂的过程，并且花费的时间也是最长的。
并且JVM TCK工具的大部分场景的用例也用来测试在装载错误的类的时候是否会出现错误。如下：
验证是链接阶段的第一步，这一步主要的目的是确保class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全。
验证阶段主要包括四个检验过程：文件格式验证、元数据验证、字节码验证和符号引用验证。

Preparing：分配一个结构用来存储类信息，这个结构中包含了类中定义的成员变量，方法和接口的信息。
准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。

Resolving：把这个类的常量池中的所有的符号引用改变成直接引用。
解析阶段是虚拟机常量池内的符号引用替换为直接引用的过程。
符号引用：符号引用是一组符号来描述所引用的目标对象，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。
符号引用与虚拟机实现的内存布局无关，引用的目标对象并不一定已经加载到内存中。
直接引用：直接引用可以是直接指向目标对象的指针、相对偏移量或是一个能间接定位到目标的句柄。
直接引用是与虚拟机内存布局实现相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同，如果有了直接引用，那引用的目标必定已经在内存中存在。

Initializing：把类中的变量初始化成合适的值。执行静态初始化程序，把静态变量初始化成指定的值。
类的初始化阶段是类加载过程的最后一步，在准备阶段，类变量已赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序制定的主观计划去初始化类变量和其他资源，
或者可以从另外一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。

类相等：两个类来源于同一个Class文件，并且被同一个类加载器加载，这两个类才相等。

子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。

双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，
每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，
子加载器才会尝试自己去加载。
使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。
例如：java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。
否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。



