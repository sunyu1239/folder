ClassLoader：
大家都知道，当我们写好一个Java程序之后，不是管是CS还是BS应用，都是由若干个.class文件组织而成的一个完整的Java应用程序，
当程序在运行时，即会调用该程序的一个入口函数来调用系统的相关功能，而这些功能都被封装在不同的class文件当中，
所以经常要从这个class文件中要调用另外一个class文件中的方法，如果另外一个文件不存在的，则会引发系统异常。
而程序在启动的时候，并不会一次性加载程序所要用的所有class文件，而是根据程序的需要，通过Java的类加载机制（ClassLoader）来动态加载某个class文件到内存当中的，
从而只有class文件被载入到了内存之后，才能被其它class所引用。所以ClassLoader就是用来动态加载class文件到内存当中用的。

java提供三种类加载：
1.BootStrap ClassLoader:启动类加载器，是java类加载中最上层的类加载器，负责加载jdk的核心类库，如：rt.jar、resources.jar、charsets.jar等。
可通过如下程序获得该类加载器从哪些地方加载了相关的jar或class文件：
    public static void main(String[] args) {
    	URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();
    	for (int i = 0; i < urls.length; i++) {
    		System.out.println(urls[i].toExternalForm());
    	}
    }
结果如下：
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/resources.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/rt.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/sunrsasign.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/jsse.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/jce.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/charsets.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/lib/jfr.jar
file:/C:/Program%20Files/Java/jre1.8.0_191/classes
其实上述结果也是通过查找sun.boot.class.path这个系统属性所得知的。
2.Etension ClassLoader:扩展类加载器，负责加载java的扩展库，默认加载JAVA_HOME/jre/lib/ext/目下的所有jar。
3.App ClassLoader:系统类加载器，负责加载应用程序classpath下的所有jar和class文件。

注意： 除了Java默认提供的三个ClassLoader之外，用户还可以根据需要定义自已的ClassLoader，而这些自定义的ClassLoader都必须继承自java.lang.ClassLoader类，
也包括Java提供的另外二个ClassLoader（Extension ClassLoader和App ClassLoader）在内，但是Bootstrap ClassLoader不继承自ClassLoader，
因为它不是一个普通的Java类，底层由C++编写，已嵌入到了JVM内核当中，当JVM启动后，Bootstrap ClassLoader也随着启动，负责加载完核心类库后，并构造Extension ClassLoader和App ClassLoader类加载器。
