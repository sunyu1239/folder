Annotation型定义为@interface, 所有的Annotation会自动继承java.lang.Annotation这一接口,并且不能再去继承别的类或是接口。
参数成员只能用public或默认(default)这两个访问权修饰。
要获取类、方法和字段的注解信息，必须通过Java的反射技术来获取 Annotation对象,除此之外没有别的获取注解对象的方法。
注解的语法比较简单，除了@符号的使用之外，它基本与Java固有语法一致。Java SE5内置了三种标准注解：
@Override，表示当前的方法定义将覆盖超类中的方法。
@Deprecated，使用了注解为它的元素编译器将发出警告，因为注解@Deprecated是不赞成使用的代码，被弃用的代码。
@SuppressWarnings，关闭不当编译器警告信息。

java还提供了4中注解，专门负责新注解的创建。
@Target
表示该注解可以用于什么地方，可能的ElementType参数有：
CONSTRUCTOR：构造器的声明
FIELD：域声明（包括enum实例）
LOCAL_VARIABLE：局部变量声明
METHOD：方法声明
PACKAGE：包声明
PARAMETER：参数声明
TYPE：类、接口（包括注解类型）或enum声明

@Retention
表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括：
SOURCE：注解将被编译器丢弃
CLASS：注解在class文件中可用，但会被VM丢弃
RUNTIME：VM将在运行期间保留注解，因此可以通过反射机制读取注解的信息。

@Document
将注解包含在Javadoc中

@Inherited
允许子类继承父类中的注解
注解的继承只能作用在类上，方法上的注解不会被继承，Interface中的所有注解不会被继承。

除了@符号，注解很像是一个接口。定义注解的时候需要用到元注解，上面用到了@Target和@RetentionPolicy，它们的含义在上面的表格中已近给出。 
在注解中一般会有一些元素以表示某些值。注解的元素看起来就像接口的方法，唯一的区别在于可以为其制定默认值。没有元素的注解称为标记注解，上面的@Test就是一个标记注解。
注解的可用的类型包括以下几种：所有基本类型、String、Class、enum、Annotation、以上类型的数组形式。
元素不能有不确定的值，即要么有默认值，要么在使用注解的时候提供元素的值。而且元素不能使用null作为默认值。
注解在只有一个元素且该元素的名称是value的情况下，在使用注解的时候可以省略“value=”，直接写需要的值即可。  

使用注解最主要的部分在于对注解的处理，那么就会涉及到注解处理器。
从原理上讲，注解处理器就是通过反射机制获取被检查方法上的注解信息，然后根据注解元素的值进行特定的处理。

public @interface{
    public String name();
	public String sex() default "female";
}
注解中的成员以无参无异常的形式声明.
使用default为成员赋默认值.
如果只有一个成员，则成员名命名为value(),使用时忽略成员名和赋值符号=。
成员修饰符只能是public，abstract。

使用自定义注解语法：
@注解(成员名1=成员1值，成员名2=成员2值,....)

解析注解：
通过反射获取类、函数或成员上运行时注解信息，从而实现动态控制程序运行的逻辑。


注解和修饰符差不多。
java内置注解@Deprecated(作用：表示被标记的代码废弃)，@SuppressWarnings（作用：忽略警告信息），@Override：用于标明此方法覆盖了父类的方法。
@SuppressWarning注解元素是字符串数组，数组值如下：
deprecation：使用了不赞成使用的类或方法时的警告；
unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型;
fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;
path：在类路径、源文件路径等中有不存在的路径时的警告;
serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告;
finally：任何 finally 子句不能正常完成时的警告;
all：关于以上所有情况的警告
@Target和@Retention，@Documented和@Inherited是由Java提供的元注解，所谓元注解就是标记其他注解的注解。
@Documented 被修饰的注解会生成到javadoc中，举例：
自定义注解@res，如果定义@res时，注解@interface Res上使用了@document，则生成javadoc文档的时候，@res会生成到doc文档中去。
自定义注解：
①如果注解当中没有定义元素，叫做标记注解。但在自定义注解中，一般都会包含一些元素以表示某些值，方便处理器使用。

注解支持的元素数据类型：
所有基本类型（int,float,boolean,byte,double,char,long,short）
String
Class
enum
Annotation
上述类型的数组

编译器对元素的默认值有些过分挑剔。首先，元素不能有不确定的值。
也就是说，元素必须要么具有默认值，要么在使用注解时提供元素的值。
其次，对于非基本类型的元素，无论是在源代码中声明，还是在注解接口中定义默认值，都不能以null作为值，
这就是限制，没有什么利用可言，但造成一个元素的存在或缺失状态，因为每个注解的声明中，所有的元素都存在，并且都具有相应的值，为了绕开这个限制，只能定义一些特殊的值，例如空字符串或负数，表示某个元素不存在。
注解会被编译成.class文件。

注解是不支持继承的，因此不能使用关键字extends来继承某个@interface，但注解在编译后，编译器会自动继承java.lang.annotation.Annotation接口

所谓的快捷方式就是注解中定义了名为value的元素，并且在使用该注解时，如果该元素是唯一需要赋值的一个元素，那么此时无需使用key=value的语法，而只需在括号内给出value元素所需的值即可。
这可以应用于任何合法类型的元素，记住，这限制了元素名必须为value。

@Inherited 可以让注解被继承，但这并不是真的继承，只是通过使用@Inherited，可以让子类Class对象使用getAnnotations()获取父类被@Inherited修饰的注解