Python它属于脚本语言，不像编译型语言那样先将程序编译成二进制再运行，而是动态的逐行解释运行。也就是从脚本第一行开始运行，没有统一的入口。
pyramid项目结构：
1..coveragerc用于配置测试时的覆盖率。(隐藏文件，使用ls -a 可以看到)
2. CHANGES.txt用于描述你对应用所做的更改。它通常是命令行格式的。
3. MANIFEST.in是一个分发“清单“文件,记录了当`python setup.py sdist`指令运行时应该将哪些文件包含进来。
4. README.txt从总体上描述了整个应用，它通常是命令行格式的。
5. develoment.ini是一个用于在开发过程中启动你的应用的配置文件
6. production.ini是一个在你将应用正式发布时启动你应用的配置文件
7. pytest.ini是一个测试的配置文件
8. setup.py是一个你可以用来测试和分发你的项目的文件。他是一个标准的setuptools setup.py文件。

development.ini文件中，包括[app:main],[server:main],以及其他几个和日志配置有关的部分。
1.[app:main]部分代表了你的Pyramid应用的配置。use选项是唯一一个在[app:main]中必须要设置的选项。
他的默认配置是use=egg:project1，这其实是use=egg:peoject1#main的简写，你在setup.py文件中的entry_points属性中也能找到这句配置。
它们的作用是一致的：用于标识我们应用的入口函数。peoject1#main实际上是一种Python定义的使用字符串来映射python对象的方式，当我们使用pserve运行ini文件启动项目时，
pserve会根据这个字符串映射去找到project1项目中的__init__.py文件中的main函数去执行（运行setup.py文件时也会去找到这个main函数作为应用入口）。这里的egg前缀是程序入口标识符。
[app:main]此部分中添加的其他设置将作为关键字参数传递给程序入口：__init__.py的main函数。
例如pyramid.includes = pyramid_debugtoolbar 告诉pyramid需要导入debbugtoolbar，pyramid.reload_templates = true告诉pyramid动态加载页面模板。
简单讲：
[app:main]配置了你的项目的程序入口，在你调用pserve运行ini文件时，会根据这行配置找到__init__.py文件的main函数并返回一个应用的实例来启动你的应用。
2.[server:main] 的配置和[app:main]的配置非常相似，[server:main] 
use = egg:waitress#main 
listen = localhost:6543
表示使用waitress服务器启动应用，并监听本地ip的6543端口。
后面包含logger的配置项代表了python的logging日志标准库中的一些设置。
当pserve运行了ini文件，这些设置会应用于项目日志输出。默认是将debug级别的日志输出到你的控制台。

production.ini
它几乎和development.ini是一样的，区别在于，它禁用了浏览器调试工具，过滤了所有warn级别以下的日志信息，并且关闭了页面模板自动重载功能。
当您需要将应用正式发布时，适合使用production.ini来启动应用。

MANIFEST.in
用于标识您启动项目时，应该加载哪些非python文件，例如.txt .pt .html .js .css文件等，如果没有MANIFEST.in文件，项目只会加载.py结尾的纯python文件。

setup.py运行时会调用setuptools工具的setup方法，它会将文件中的参数传递给pip完成项目依赖库的安装。 
你可以在文件中设置项目名称，版本等信息。 

项目下同名的子文件夹下的各个文件夹：
__init__.py是一个用于启动应用的python文件，它包含了一个表示程序入口的用于被pserve或pshell等调用的main函数。
templates目录，顾名思义，存放的是页面模板文件，这里的jinja2模板是以.pt结尾。
tests.py是用于测试应用的代码
views.py是处理http请求，返回响应的python文件
static目录包含了一些静态文件，比如项目中的图片或是css样式文件

自定义包结构：
多个视图时，想将所有的视图都放到子文件views里,那么你需要做如下3步：
在你包内建立一个名叫views的文件目录（和原来的views.py同级）
在views目录内建立一个__init__.py文件。这个文件可以是空的，只是用于告诉Python这个目录是一个包
将views.py的内容移动到views文件夹的blog.py文件内，由于页面模板文件templates还是在project1目录下，因此blog.py中的模板的引用必须使用绝对路径（project1:templates/mytemplate.jinja2）

main函数；
  这个main函数是Pyramid自动生成的本项目的入口，这里global_config, settings两个参数分别对应于development.ini(或production.ini)中的DEFAULT段和app:myproject段的内容。本函数主要功能就是完成了使用traversal机制进行URL映射的配置过程。traversal机制是受zope启发而来的一种URL映射机制，可以构建比较复杂的URL结构。如果URL结构比较简单的化，可以使用ROUTE机制，比较直观一点。
该函数最后返回一个WSGI应用以启动本应用。
通俗的理解__name__ == '__main__'：假如你叫小明.py，在朋友眼中，你是小明(__name__ == '小明')；在你自己眼中，你是你自己(__name__ == '__main__')。
if __name__ == '__main__'的意思是：当.py文件被直接运行时，if __name__ == '__main__'之下的代码块将被运行；当.py文件以模块形式被导入时，if __name__ == '__main__'之下的代码块不被运行。
模块如果被其他模块引入，其他模块运行时，本模块中执行的操作不想被执行，可以用上述来判断，限制他的执行。


self详解：
1.self代表类的实例，而非类。
2.self不必非写成self。
t=Test()
t.prt()
实际上t.prt()是Test.prt(t)

算数运算：
**：次方运算
*除了是算数运算符乘号的作用，用在string上就是重复的意思。例子：
>>> 3 * 'un' + 'ium'
'unununium'
字符串之间如果没有连接符+，照样会自动连接。例子：
>>> 'Py' 'thon'
'Python'
这只在两个字符串之间才有效，如果是变量或者表达式的话，不起作用。

string index 即可以从左边开始0，1...;又可以从右边开始：-1，-2...。
string 被赋值后是不变的。长度固定，index对应的值不可变。

list []内的元素类型可以不同，一般都相同，长度可变，index对应的值可变。例子：squares = [1, 4, 9, 16, 25]
使用下表index取值，返回的是新的list，例子：
>>> squares[0]  # indexing returns the item
1
下面的例子，返回的是list的复制list：
>>> squares[:]
[1, 4, 9, 16, 25]
不过xx[:]这种用法还可以清空xxlist，例子：
>>> letters[:] = []
>>> letters
[]

条件语句：
if...：
elif ...：
else：
没有switch，case语句。

循环语句：
while：和java不同的是，没有do...while。

for循环
>>> for w in words[:]:  # Loop over a slice copy of the entire list.
...     if len(w) > 6:
...         words.insert(0, w)
...
>>> words
['defenestrate', 'cat', 'window', 'defenestrate']

Loop statements may have an else clause，例子：
>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(n, 'equals', x, '*', n//x)
...             break
...     else:
...         # loop fell through without finding a factor
...         print(n, 'is a prime number')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
这里的else用法：it is executed when the loop terminates through exhaustion of the list (with for) or when the condition becomes false (with while), 
but not when the loop is terminated by a break statement.
上述代码来看，子for循环结束时，执行else，break的时候，不会执行。while是循环条件不满足的时候，执行else。

range()返回连续数，具体用法自查。参数可选。

pass：
The pass statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example:
>>> while True:
...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)
...

This is commonly used for creating minimal classes:
>>> class MyEmptyClass:
...     pass
...

Another place pass can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The pass is silently ignored:
>>> def initlog(*args):
...     pass   # Remember to implement this!
...

有返回值的称为函数，没有返回值的称为过程。

def funcionName:
return
函数不写return也是没有关系的，因为默认会返回None。

函数的参数写法：
例子：
def ask_ok(prompt, retries=4, reminder='Please try again!'):
    while True:
        ok = input(prompt)
        if ok in ('y', 'ye', 'yes'):
            return True
        if ok in ('n', 'no', 'nop', 'nope'):
            return False
        retries = retries - 1
        if retries < 0:
            raise ValueError('invalid user response')
        print(reminder)
这个例子里的参数是有默认值的。有默认值的，实际调用的时候可以不传，上述函数可以只传一个prompt。例子：
giving only the mandatory argument: ask_ok('Do you really want to quit?')
giving one of the optional arguments: ask_ok('OK to overwrite the file?', 2)
or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')、
参数的默认值只能赋值一次。不管是常量形式，还是变量形式。

函数的参数类型：POSITIONAL_OR_KEYWORD、VAR_POSITIONAL、VAR_KEYWORD、KEYWORD_ONLY、POSITIONAL_ONLY。
1.POSITIONAL_OR_KEYWORD如其名所见，既可以用位置传参，也可以用关键字传参，并且他没有任何*的声明
 def foo(name):
...     print(name)
...
>>> foo("hello")
hello
>>> foo(name="hello")
hello

2.VAR_POSITIONAL是可变参数，通过*来声明，它会把接收到的值存入一个元组
>>> def foo(*args):
...     print(args)
...
>>> foo(1, 2, 3, 4, 5)
(1, 2, 3, 4, 5)

3.KEYWORD_ONLY只能通过关键字传参，这种参数会在VAR_POSITIONAL参数类型的后面，而且不带**前缀，如同语义，只能通过指定关键字来传参，不可以用位置传参
>>> def foo(n1, *, n2):
...     print(n1, n2)
...
>>> foo("hello", n2="world")
hello world

4.VAR_KEYWORD是可变关键字参数，通过前缀**来声明，这种参数类型可以接收0个或多个参数，并存入一个字典
>>> def foo(**kwargs):
...     for key, value in kwargs.items():
...         print("%s=%s" % (key, value))
...
>>> foo(a=1, b=2, c=3)
a=1
b=2
c=3

5.POSITIONAL_ONLY是第五个参数类型，但是它已经不重要了，因为高版本的Python无法创建一个POSITIONAL_ONLY类型的参数，但是有些使用C语言实现且不接收关键字参数的函数（如divmod）支持

从下面的例子，我们可以看到，新定义的foo函数，每个参数都对应到上面的一个类型
>>> def foo(name, *args, middle=None, **kwargs): #----位置或关键字参数(1/'hhah' or a=1/a='hha'),可变位置参数('h','a'/1,2),关键字参数(a=1/a='aa')（这个一定是接在可变位置参数后面）,可变关键字(a='a',b='a'/a=1,b=2)
...     print("name:", name)
...     print("args:", args)
...     print("middle:", middle)
...     print("kwargs:", kwargs)
...
>>> foo("hello", 1, 2, 3, middle="world", a=1, b=2, c=3)
name: hello
args: (1, 2, 3)
middle: world
kwargs: {'a': 1, 'b': 2, 'c': 3}
>>> my_foo = {"name": "hello", "middle": "world", "a": "1", "b": "2", "c": "3"}
>>> foo(**my_foo)
name: hello
args: ()
middle: world
kwargs: {'a': '1', 'b': '2', 'c': '3'}
>>> from inspect import signature
>>> sig = signature(foo)
>>> for name, param in sig.parameters.items():
...     print(param.kind, ":", name, '=', param.default)
...
POSITIONAL_OR_KEYWORD : name = <class 'inspect._empty'>
VAR_POSITIONAL : args = <class 'inspect._empty'>
KEYWORD_ONLY : middle = None
VAR_KEYWORD : kwargs = <class 'inspect._empty'>

参数绑定：
1.将函数的参数绑定到一个字典上：上述代码中就有例子。
在inspect模块的帮助下，展示了Python数据模型把实参绑定给函数调用的形参的机制，这与解释器使用的机制相同，当我们删除字典中的name，执行时会报错缺少name参数。

2.再者，我们使用operator模块进行参数绑定
>>> from operator import methodcaller
>>> s = "The time has come"
>>> upcase = methodcaller("upper")
>>> upcase(s)
'THE TIME HAS COME'
>>> hiphenate = methodcaller("replace", " ", "-")
>>> hiphenate(s)
'The-time-has-come'
　
如上，methodcaller创建的函数会在对象上调用参数指定的方法，我们可以自己建立一个对象并生成自己的方法，再用methodcaller调用
class Person:
    def __init__(self, name):
        self.name = name
 
    def say(self, text):
        print(self.name, 'say:', text)
 
p = Person("John")
person_say = methodcaller("say", "hello")
person_say(p)

最后会打印：
John say: hello


使用function.partial冻结参数：
function.partial这个高阶函数用于部分应用函数，部分应用是指，基于一个函数创建一个新的可调用对象，把原函数的某些参数固定
>>> from operator import mul
>>> from functools import partial
>>> triple = partial(mul, 3)
>>> triple(7)
21
>>> list(map(triple, range(1, 10)))
[3, 6, 9, 12, 15, 18, 21, 24, 27]
　　
如上，我们使用mul创建了triple函数，把第一个参数固定为3，然后返回一个可调用的对象，再传入不同的参数。

Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。例子：
str = "-";
seq = ("a", "b", "c"); # 字符串序列
print str.join( seq );
输出：
a-b-c

元组：
用()标识，元组负完值之后，是不可变的。

面向对象简介：
类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
数据成员：类变量或者实例变量, 用于处理类及其实例对象的相关的数据。
方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
局部变量：定义在方法中的变量，只作用于当前实例的类。
实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。
继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
实例化：创建一个类的实例，类的具体对象。
方法：类中定义的函数。
对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。

数据类型，赋值之后不可变。

类属性和实例属性，例子：
class Dog:
    kind = 'canine'         # class variable shared by all instances
    def __init__(self, name):
        self.name = name    # instance variable unique to each instance

类对象支持的操作：
总的来说，类对象仅支持两个操作：
实例化；使用instance_name = class_name()的方式实例化，实例化操作创建该类的实例。
属性引用；使用class_name.attr_name的方式引用类属性。

实例对象是类对象实例化的产物，实例对象仅支持一个操作：
属性引用；与类对象属性引用的方式相同，使用instance_name.attr_name的方式。
按照严格的面向对象思想，所有属性都应该是实例的，类属性不应该存在。那么在Python中，由于类属性绑定就不应该存在，类定义中就只剩下函数定义了。

属性绑定：
在定义类时，通常我们说的定义属性，其实是分为两个方面的：

类属性绑定
实例属性绑定
用绑定这个词更加确切；不管是类对象还是实例对象，属性都是依托对象而存在的。
我们说的属性绑定，首先需要一个可变对象，才能执行绑定操作，使用
objname.attr = attr_value
的方式，为对象objname绑定属性attr。
这分两种情况：
若属性attr已经存在，绑定操作会将属性名指向新的对象；
若不存在，则为该对象添加新的属性，后面就可以引用新增属性。

实例属性引用
使用实例对象引用属性稍微复杂一些，因为实例对象可引用类属性以及实例属性。但是实例对象引用属性时遵循以下规则：
总是先到实例对象中查找属性，再到类属性中查找属性；
属性绑定语句总是为实例对象创建新属性，属性存在时，更新属性指向的对象。例子：
class Dog:

    kind = 'canine'
    country = 'China'

    def __init__(self, name, age, country):
        self.name = name
        self.age = age
        self.country = country

dog = Dog('Lily', 3, 'Britain')
print(dog.name, dog.age, dog.kind, dog.country)

方法属性引用：
与数据成员不同，类函数属性在实例对象中会变成方法属性。

类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。
类的方法:
在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。

继承：
多继承的时候，多个基类中有同名的方法，子类没有显示调用，此时子类护着么查找，即一个派生类（derived需要注意圆括号中基类的顺序，若是基类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找基类中是否包含方法。
如果在子类中需要父类的构造方法就需要显式地调用父类的构造方法，或者不重写父类的构造方法。
子类不重写 __init__，实例化子类时，会自动调用父类定义的 __init__。
如果重写了__init__ 时，要继承父类的构造方法，可以使用 super 关键字：
super(子类，self).__init__(参数1，参数2，....)
还有一种经典写法：
父类名称.__init__(self,参数1，参数2，...)

类的私有属性：
__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。
类的私有方法
__private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.__private_methods
类的专有方法：
__init__ : 构造函数，在生成对象时调用
__del__ : 析构函数，释放对象时使用
__repr__ : 打印，转换
__setitem__ : 按照索引赋值
__getitem__: 按照索引获取值
__len__: 获得长度
__cmp__: 比较运算
__call__: 函数调用
__add__: 加运算
__sub__: 减运算
__mul__: 乘运算
__truediv__: 除运算
__mod__: 求余运算
__pow__: 乘方

模块：
python模块说明：类似于函数式编程和面向过程编程，函数式编程则完成一个功能，其他代码用来调用即可，提供了代码的重用性和代码间的耦合。而对于一个复杂的功能来，可能需要多个函数才能完成（函数又可以在不同的.py文件中），多个 .py 文件组成的代码集合就称为模块。
模块分三种：内置模块，第三方模块，自定义模块