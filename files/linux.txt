cd -P 软连接直接目录
cd -L 软连接目录
mkdir -p 逐级建立文件夹
mkdir -p a/b/c
ls -a 显示目录下所有文件包括隐藏文件
ls -l 显示文件详细信息
ls -i 显示文件的节点号
ls -d 显示当前目录
rmdir -p 逐级删除空目录,只能删除空目录
文件具有三个时间，access time访问 modify time修改时间 chang time 状态时间，linux中文件没有创建时间
touch 不是新建文件，是触摸文件，如果文件不存在，则建立该文件，文件如存在，则修改时间戳。本质是修改文件时间戳。
touch -a 只修改文件访问时间access
touch -c 触摸文件时，如不存在，则不建立新文件。
touch -d 修改文件时间戳，指定时间
touch -m 修改文件的数据修改时间modify time
stat 查看文件更详细的信息，包括三个时间。
stat -f 查看文件的文件系统信息
cat concatenate 连接concatenat file and print to standard output
cat 适合查看中等大小的文件，文件过长，翻页也看不到最前面的内容。
cat -A 列出隐藏符号
cat -E 列出行尾回车符
cat -n 显示行号
cat -T 显示TAB符号
cat -V 显示特殊符号
文件过大，使用more查看，分屏显示
more打开交互界面
空格键下页，b上页，/查询，q退出，回车向下滚动一行。
head 只显示文件开头部分，不全显示。
head -n 显示指定行数，默认前10行
head -v 显示文件名
tail 显示文件行尾部分
tail -n 行尾开始，显示指定行尾，默认10行。
tail -f 监听文件新增内容，需要两个终端来体现，一个用tail命令执行监听命令，另一个新开的终端向监听文件里增加新内容。
ubuntu装系统时，分区其实是在未分配硬盘中写入文件系统ext4，文件系统其实是一种文件存贮方式。
ext4格式的文件系统，把分区划分为节点区域和块区域。文件的三个时间，节点信息是存在节点区域的，实际文件内容存贮在块区域，块单元1-4kb，默认4kb。文件内容是放在多个块里面，可能是连续块，也可能是不连续块。
ln make links between files
ln -s 建立软连接
ln -f 如果文件已存在，强制覆盖。
ln /root/cangls /tmp/
#建立硬链接文件，目标文件没有写文件名，会和原名一致,也就是 /root/cangls 和 /tmp/cangls 是硬链接文件.
软链接文件的源文件必须写成绝对路径，而不能写成相对路径（硬链接没有这样的要求）；否则软链接文件会报错。这是初学者非常容易犯的错误。
在inode信息中，是不会记录文件名称的，文件的inode名记载在文件上级目录块中，该文件的具体内容记载在该文件对应的块中。
当我们查找一个文件，比如 /root/test 时，要经过以下步骤：
首先找到根目录的 inode（根目录的 inode 是系统已知的，inode 号是 2），然后判断用户是否有权限访问根目录的 block。
如果有权限，则可以在根目录的 block 中访问到 /root 的文件名及对应的 inode 号。
通过 /root/ 目录的 inode 号，可以查找到 /root/ 目录的 inode 信息，接着判断用户是否有权限访问 /root/ 目录的 block。
如果有权限，则可以从 /root/ 目录的 block 中读取到 test 文件的文件名及对应的 inode 号。
通过 test 文件的 inode 号，就可以找到 test 文件的 inode 信息，接着判断用户是否有权限访问 test 文件的 block。
如果有权限，则可以读取 block 中的数据，这样就完成了 /root/test 文件的读取与访问。

这就是硬链接的原理。硬链接的特点如下：
不论是修改源文件（test 文件），还是修改硬链接文件（test-hard 文件），另一个文件中的数据都会发生改变。
不论是删除源文件，还是删除硬链接文件，只要还有一个文件存在，这个文件（inode 号是 262147 的文件）都可以被访问。
硬链接不会建立新的 inode 信息，也不会更改 inode 的总数。
硬链接不能跨文件系统（分区）建立，因为在不同的文件系统中，inode 号是重新计算的。
硬链接不能链接目录，因为如果给目录建立硬链接，那么不仅目录本身需要重新建立，目录下所有的子文件，包括子目录中的所有子文件都需要建立硬链接，这对当前的 Linux 来讲过于复杂。
rm -rf/root/test删除链接（软硬都是一样的）。

软链接可以链接目录，也可以跨分区来建立软链接。
硬链接不会建立自己的 inode 索引和 block（数据块），而是直接指向源文件的 inode 信息和 block，所以硬链接和源文件的 inode 号是一致的；
不论是修改源文件（check），还是修改硬链接文件（check-soft)，另一个文件中的数据都会发生改变。
删除软链接文件，源文件不受影响。而删除原文件，软链接文件将找不到实际的数据，从而显示文件不存在。
软链接会新建自己的 inode 信息和 block，只是在 block 中不存储实际文件数据，而存储的是源文件的文件名及 inode 号。
软链接可以链接目录。
软链接可以跨分区。而软链接会真正建立自己的 inode 索引和 block，所以软链接和源文件的 inode 号是不一致的，而且在软链接的 block 中，写的不是真正的数据，而仅仅是源文件的文件名及 inode 号。
 
rm 是强大的删除命令，不仅可以删除文件，也可以删除目录。
rm -f 强制删除
rm -r 递归删除
rm -i 删除前会确认，交互删除

cp 复制文件和目录
mv 剪切，移动文件和改名。
mv -f 强制覆盖
mv -i 移动时，如果文件存在，提示是否覆盖
mv -n 文件存在时，不覆盖，也不询问
mv -v 显示详细信息
linux文件权限位：第一位
"-"：普通文件。
"b"：块设备文件。这是一种特殊设备文件，存储设备都是这种文件，如分区文件 /dev/sda1 就是这种文件。
"c"：字符设备文件。这也是特殊设备文件，输入设备一般都是这种文件，如鼠标、键盘等。
"d"：目录文件。Linux 中一切皆文件，所以目录也是文件的一种。
"l"：软链接文件。
"p"：管道符文件。这是一种非常少见的特殊设备文件。
"s"：套接字文件。这也是一种特殊设备文件，一些服务支持 Socket 访问，就会产生这样的文件。
rwxrwxrwx.  如果在文件的权限位中含有"."，则表示这个文件受 SELinux 的安全规则管理。
chmod 修改权限命令
chmod -R 递归修改
用户身份（u，g,o,a）+赋予方式（+，-，=）+权限（r，w，x对应4，2，1）
chown 修改用户和用户组
chown -R 逐级修改
chown -R 用户：用户组

chgrp 修改文件和目录的用户组
chgrp 用户组 用户

Linux man命令 
umask 默认权限是 Linux 权限的一种，主要用于让 Linux 中的新建文件和目录拥有默认权限。
在 Linux 中，通过 umask 默认权限来给所有新建立的文件和目录赋予初始权限，这一点和 Windows 不太一样，Windows 是通过继承上级目录的权限来给文件和目录赋予初始权限的。

0022"，其中第一个数字"0"代表的是文件的特殊权限（SetUID、SetGID、Sticky BIT)，特殊权限我们放在后续章节来详细讲解，现在先不讨论。也就是后 3 位数字"022"才是真正的 umask 默认权限。

对文件来讲，新建文件的默认最大权限是 666，没有执行（x）权限。这是因为执行权限对文件来讲比较危险，不能在新建文件的时候默认赋予，而必须通过用户手工赋予。
对目录来讲，新建目录的默认最大权限是 777。这是因为对目录而言，执行（x）权限仅仅代表进入目录，所以即使建立新文件时直接默认赋予，也没有什么危险。

umask默认权限的计算方法：
文件默认权限：666-022=（rw-rw-rw-）-（----w--w-）=（rw-r--r--）=644 rw-r--r--
目录权限：777-022=（rwxrwxrwx）-（---w--w-）=（rwxr-xr-x）=755 rwxr-xr-x
umask 默认权限的计算是不能直接使用数字相减的（022），通过二进制逻辑与和逻辑非联合运算得到的。
umask 除了临时修改，永久修改则在/etc/profile里修改。

man 显示联机帮助手册 man [选项] 命令
man -f 查看命令有哪个级别的帮助
man -k 查看和命令相关的所有帮助
whatis 命令是干什么的
whereis 命令在哪里
whoami 当前用户是什么

info 查看所有帮助信息 man查看的只是单独的部分信息
help 查看shell内部命令，man 可以查看内外命令。
man help查看内置命令
命令 --help 相当于man命令的简要版。

whereis 搜索系统命令，不能搜文件
whereis -b 只查找二进制命令
whereis -m 只查找帮助文档

which 列出命令的路径 
which 也是搜索系统命令的命令。和 whereis 命令的区别在于，whereis 命令可以在查找到二进制命令的同时，查找到帮助文档的位置；
而 which 命令在查找到二进制命令的同时，如果这个命令有别名，则还可以找到别名命令。

locate
whereis 和 which 命令都是只能搜索系统命令的命令，而 locate 命令才是可以按照文件名搜索普通文件的命令。
但是 locate 命令的局限也很明显，它只能按照文件名来搜索文件，而不能执行更复杂的搜索，比如按照权限、大小、修改时间等搜索文件。
如果要按照复杂条件执行搜索，则只能求助于功能更加强大的 find 命令。locate 命令的优点鮮常明显，那就是搜索速度非常快，而且耗费系统资源非常小。
这是因为 locate 命令不会直接搜索硬盘空间，而会先建立 locate 数据库，然后在数据库中按照文件名进行搜索，是快速的搜索命令。
locate -i忽略大小写
updatedb更新locate数据库，不需要重启，不过有种情况会不行，建立的文件在updatedb.conf里不检索的范围内时，无效。

find 是 Linux 中强大的搜索命令，不仅可以按照文件名搜索文件，还可以按照权限、大小、时间、inode 号等来搜索文件。
但是 find 命令是直接在硬盘中进行搜索的，如果指定的搜索范围过大，find命令就会消耗较大的系统资源，导致服务器压力过大。所以，在使用 find 命令搜索时，不要指定过大的搜索范围。

find 搜索路径 [选项] 搜索内容
find -name 按照文件名检索
find -iname 按照文件名，不区分大小写检索
find -inum 按照inode号检索
find /sss -name a.txt
find . -size +/-25k 按照文件大小查找
File uses n units of space. The following suffixes can be used:
'b' for 512-byte blocks (this is the default if no suffix is used)
#这是默认单位，如果单位为b或不写单位，则按照 512Byte搜索
'c' for bytes
#搜索单位是c，按照字节搜索
'w' for two-byte words
#搜索单位是w，按照双字节（中文）搜索
'k'for Kilobytes (units of 1024 bytes)
#按照KB单位搜索，必须是小写的k
'M' for Megabytes (units of 1048576 bytes)
#按照MB单位搜索，必须是大写的M
'G' for Gigabytes (units of 1073741824 bytes)
#按照GB单位搜索，必须是大写的G

find -atime [+-] 按照文件访问时间搜索
find -mtime [+-]时间: 按照文改时间搜索
find -ctime [+-]时间: 按照文件修改时间搜索
-5：代表5天内修改的文件。
5：代表前5~6天那一天修改的文件。
+5：代表6天前修改的文件。
find 不仅可以按照 atmie、mtime、ctime 来査找文件的时间，
也可以按照 amin、mmin 和 cmin 来査找文件的时间，区别只是所有 time 选项的默认单位是天，而 min 选项的默认单位是分钟。

按照权限搜索
find . -perm 444 代表査找的权限必须和指定的权限模式一模一样
find . -perm -200 代表的是文件的权限必须全部包含搜索命令指定的权限模式，才可以找到。（也就是说文件权限的每个位置分别需要包含2，0，0的权限，可以有其他的，例如：755就包含200）
？ find .-perm +444 刚刚的"-perm-权限模式"是必须完全包含，才能找到；而"-perm+权限模式"是只要包含任意一个指定权限，就可以找到。

按照所有者和所属组搜索
-uid 用户 ID:按照用户 ID 査找所有者是指定 ID 的文件
-gid 组 ID:按照用户组 ID 査找所属组是指定 ID 的文件
-user 用户名：按照用户名査找所有者是指定用户的文件
-group 组名：按照组名査找所属组是指定用户组的文件
-nouser：査找没有所有者的文件
"-nouser"选项比较常用，主要用于査找垃圾文件。
在 Linux 中，所有的文件都有所有者，只有一种情况例外，那就是外来文件。
比如光盘和 U 盘中的文件如果是由 Windows 复制的，在 Linux 中査看就是没有所有者的文件；再比如手工源码包安装的文件，也有可能没有所有者。

按照文件类型搜索
-type d：查找目录
-type f：查找普通文件
-type l：查找软链接文件
find . -type d 

当用到多个条件查找时，可以用逻辑运算符来运算多个条件。
-a：and逻辑与（两个条件都成立，find 搜索的结果才成立）
-o：or逻辑或（两个条件只要其中一个成立，find 命令就可以找到结果）
-not：not逻辑非
find . -size -20k -a -perm -200 在当前目录下搜索小于2KB，并且文件权限是完全包含200的文件

find 搜索路径 [选项] 搜索内容 -exec 命令2{}\;
"{}"和"\;"是标准格式，只要执行"-exec"选项，这两个符号必须完整输入。
find.-perm 444 -exec ls -l {}\；
"-exec"选项的作用是把 find 命令的结果放入"{}"中，再由命令 2 直接处理。
find . -name a.txt -exec ls -1 {}\;
"-ok"选项和"-exec"选项的作用基本一致，区别在于："-exec"的命令会直接处理，而不询问；"-ok"的命令 2 在处理前会先询问用户是否这样处理，在得到确认命令后，才会执行
find . -name a.txt -ok rm -rf {}\;

.zip压缩文件
zip  压缩名 多个/单个源文件或目录
zip -r 压缩目录

unzip -d： 指定解压缩位置
unzip -d /路径 解压文件.zip

.gz压缩文件
gzip 源文件
gzip -c 将压缩数据输出到标准输出，可以用于保留源文件。
gzip -c anaconda-ks.cfg >anaconda-ks.cfg.gz
使用-c选项，但是不让压缩数据输出到屏幕上，而是重定向到压缩文件中，#这样可以缩文件的同时不删除源文件。
gzip -r 压缩目录
原来gzip命令不会打包目录，而是把目录下所有的子文件分别压缩
在 Linux 中，打包和压缩是分开处理的。而 gzip 命令只会压缩，不能打包，所以才会出现没有打包目录，而只把目录下的文件进行压缩的情况。
-d：解压缩；
-r：压缩目录；
-v：显示压缩文件的信息；
-数字：用于指定压缩等级，-1 压缩等级最低，压缩比最差；-9 压缩比最高。默认压缩比是 -6；
打包和压缩。打包是指将一大堆文件或目录什么的变成一个总的文件，压缩则是将一个大的文件通过一些压缩算法变成一个小文件。为什么要区分这 两个概念呢？
其实这源于Linux中的很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你就得先借助另外的工具将这一大堆文件先打 成一个包，然后再就原来的压缩程序进行压缩。

gunzip <==> gzip -d
如果我们压缩的是一个纯文本文件，则可以直接使用 zcat 命令在不解压缩的情况下査看这个文本文件中的内容。
zcat a.gz

.bz2格式文件
bzip2
-d：解压缩。
-k：压缩时，保留源文件。
-v：显示压缩的详细信息。
-数字：这个参数和 gzip 命令的作用一样，用于指定压缩等级，-1 压缩等级最低，压缩比最差；-9 压缩比最高。
大家注意，gzip 只是不会打包目录，但是如果使用“-r”选项，则可以分别压缩目录下的每个文件；而 bzip2 命令则根本不支持压缩目录，也没有“-r”选项。
bunzip <==> bzip2 -d
-k：解压缩时，保留源文件
和".gz"格式一样，".bz2"格式压缩的纯文本文件也可以不解压缩直接査看，使用的命令是 bzcat
 bzcat install.log.syslog.bz2
 
打包与解打包命令
tar 
-c：打包；
-f：指定压缩包的文件名。压缩包的扩展名是用来给管理员识别格式的，所以一定要正确指定扩展名；
-v：显示打包文件过程；
tar -cvf ana.tar anaconda-ks.cfg /tmp/

-x：解打包；
-f：指定压缩包的文件名；
-v：显示打包文件过程；
-t：测试，就是不解打包，只是査看包中有哪些文件；
-C 目录：指定解打包位置；
-z：压缩和解压缩 ".tar.gz"格式
-j：压缩和街压缩 ".tar.bz2"格式
a.txt.tar.gz
a.txt.tar.bz

sync刷新文件系统缓冲区
sync 命令的作用就是把内存中的数据强制向硬盘中保存。
记得关机或重启之前多执行几次 sync 命令

关机和重启
shutdown/reboot关机或重启之前会正确地中止进程及服务。
shutdown
shutdown [选项] 时间 [警告信息]
-c：取消已经执行的 shutdown 命令；
-h：关机；
-r：重启；
shutdown -r 05:30 &
把定义重启命令放入后台，&是后台的意思
shutdown -c
//取消定时重启
shutdown -r +10
#10分钟之后重启
reboot重启
halt/poweroff关机
init 是修改 Linux 运行级别的命令，也可以用于关机和重启。
关机，也就是调用系统的 0 级别。
重启，也就是调用系统的 6 级别。

系统配置工具setup
这是一个综合工具，既可以配置 IP 地址，也可以管理防火墙和系统服务。如果我们需要配置 IP 地址，则只要选择"网络配置"就会开始 IP 地址配置。

ifconfig 是 Linux 中査看和临时修改 IP 地址的命令

ping向网络主机发送ICMP请求
-b: 后面加入广播地址，用于对整个网段进行探测；
-c 次数： 用于指定 ping 的次数；
-s 字节： 指定探测包的大小；
Ctrl+C"快捷键强行中止

我有一台服务器，它有固定的公网 IP 地址，通过 IP 地址可以找到我的服务器。但是我的服务器中既启动了网页服务（Web 服务），又启动了文件传输服务（FTP 服务），
那么你的客户端访问我的服务器，到底应该如何确定你访问的是哪一个服务呢？

端口就是用于网络通信的接口，是数据从传输层向上传递到应用层的数据通道。我们可以理解为每个常规服务都有默认的端口号，通过不同的端口号，我们就可以确定不同的服务。
也就是说，客户端通过 IP 地址访问到我的服务器，如果数据包访问的是 80 端口，则访问的是 Web 服务；而如果数据包访问的是 21 端口，则访问的是 FTP 服务。

netstat 是网络状态查看命令，既可以查看到本机开启的端口，也可以查看有哪些客户端连接。
-a：列出所有网络状态，包括 Socket 程序；
-c秒数：指定每隔几秒刷新一次网络状态；
-n：使用 IP 地址和端口号显示，不使用域名与服务名；
-p：显示 PID 和程序名；
-t：显示使用 TCP 协议端口的连接状况；
-u：显示使用 UDP 协议端口的连接状况；
-I：仅显示监听状态的连接；
-r：显示路由表；
1) Proto：网络连接的协议，一般就是 TCP 协议或者 UDP 协议。
2) Recv-Q：表示接收到的数据，已经在本地的缓冲中，但是还没有被进程取走。
3) Send-Q：表示从本机发送，对方还没有收到的数据，依然在本地的缓冲中，不具备 ACK 标志的数据包。
4) Local Address：本机的 IP 地址和端口号。
5) ForeignAddress：远程主机的 IP 地址和端口号。
6) State：状态。常见的状态主要有以下几种。
-LISTEN：监听状态，只有 TCP 协议需要监听，而 UDP 协议不需要监听。
-ESTABLISHED：已经建立连接的状态。如果使用"-I"选项，则看不到已经建立连接的状态。
-SYN_SENT：SYN 发起包，就是主动发起连接的数据包。
-SYN_RECV：接收到主动连接的数据包。
-FIN_WAIT1：正在中断的连接。
-FIN_WAIT2：已经中断的连接，但是正在等待对方主机进行确认。
-TIME_WAIT：连接已经中断，但是套接字依然在网络中等待结束。
-CLOSED：套接字没有被使用。

向其他用户发送信息write
write 用户名 [终端号]
信息
Ctrl+D"快捷键保存发送的数据

发送和接收电子邮件mail
mail userl
Subject: hello <-邮件标题
Nice to meet you! <-邮件具体内容
. <-使用.来结束邮件输入
-s： 指定邮件标题
mail -s 'test mail' 用户 <要发送的文件
mail查看已接受到邮件,交互界面输入?，查看命令帮助。

vim是所有linux版本通用的文本编辑器，vi加强版，help vi-diff。
vim三种工作模式
vi进入命令模式。i，a,o进入输入模式，esc退出到命令模式。
命令模式下：进入编辑模式，输入命令，回车结束退到命令模式。
？命令模式下ZZ退出
i：在当前光标所在位置插入随后输入的文本，光标后的文本相应向右移动
I：在光标所在行的行首插入随后输入的文本，行首是该行的第一个非空白字符，相当于光标移动到行首执行i命令
a：在当前光标所在位置之后插入随后输入的文本
A：在光标所在行的行尾插入随后输入的文本，相当于光标移动到行尾再执行a命令
o：在光标所在行的下面插入新的一行。光标停在空行首，等待输入文本
O：在光标所在行的上面插入新的一行。光标停在空行的行首，等待输入文本。
命令模式下：
w：移动光标到下一个单词的单词首
b：移动光标到上一个单词的单词首
e：移动光标到下一个单词的单词尾
可以使用"$"命令将光标移至行尾，或者使用"0"或"^"命令将光标移至行首。
其实，对于 $ 命令来说，可以使用诸如"n$"之类的命令来将光标移至当前光标所在行的之后 n 行的行尾（n 为数字）;对于"0"命令来说却不可以，但可以用"n^"。
可以直接在命令模式中输入"nG"（n 为数字，G 为大写）或":n"（在编辑模式中输入数字）命令将光标快速地定位到指定行的行首。这种方法对快速移动光标非常有效。

査找指定字符串
在命令模式下进行，输入"/要査找的字符串"，再按一下回车键，就可以从光标所在行开始向下査找指定的字符串。如果要向上査找，则只需输入"？要査找的字符串"即可。
/xxx 光标向下查找
？xxx 光标向上查找
多个xxx匹配时，n向下，N向上。
查找是区分大小写的，编辑模式：set ic 忽略大小写，set noic 不忽略大小写。
查找xxx中有特殊字符，\转译。
命令模式下：
小写"r"可以替换光标所在处的某个字符，将光标移动到想替换的单个字符处，按下"r"键，然后直接输入替换的字符即可。
大写"R"可以从光标所在处开始替换字符，输入会覆盖后面的文本内容，直到按 Esc 键结束。
批量替换格式如下：
替换范围内的字符串：:替换起始处，替换结束处s/源字符串/替换的字符串/g。
替换整篇文档的字符串：:%s/源字符串/替换的字符串/g（如果不加g，则只替换每行第一个找到的字符串）。
:1, $s/root/liudehua/g
或
:%s/root/liudehua/g
在编辑模式下操作的，表示的是从第一行到最后一行，即全文査找"root"，然后替换成"liudehua"。

： 开始行，结束行/被替换的字符/替换字符/g
： %s/被替换字符/替换字符/g
命令模式下：
x删除光标所在位置字符，dd删除光标所在行整行，ndd删除光标下n行，最新一次删除的存储在内存中，p可以粘贴。
dG删除光标所在行到文件结尾，D删除光标到所在行的行尾。
yy复制单行，nyy复制多行。
J去除换行符，作用是合并两行为一行。
u撤销上次的操作。相当于win系统的ctrl+z。
？ Vim 的保存和退出是在命令模式中进行的
字母"w"：保存不退出；
字母"q"：不保存退出；
字符"!"：强制性操作；
编辑模式下： 
： 开始行，终止行d 同样能删除指定行。
：q不保存退出
：w保存但是不退出
：q!强制退出
：w!强制保存
：set nu 显示行号
：set nonu 不显示行号
：set all查看所有的设置参数。
Vim多窗口编辑：
在命令行模式下，：sp /另一个要打开的文件路径（水平分割） ，：vs /另一个要打开的文件路劲。（垂直分割）
另外一种编辑方式：vim -o /文件1的路径  /文件2的路劲
切换窗口ctrl+WW
：r 文件名，复制文件到当前光标下的窗口。
编辑shell文件时，添加注释来回切换模式不好。这时巧用替换命令就可以不用来回切换模式
连续行添加注释：
：起始行，终止行s/^/#/g行首替换#
:起始行，终止行s/^#//g取消注释#
添加//类型的注释：
：起始行，终止行s/^/\/\//g 行首替换//
非连续行的注释：
定义快捷键执行mingling
:map 快捷键 执行命令
：map ^p|#<Esc>
"^P"为定义快捷键"Ctrl+P,必须同时按"Ctrl+V+P"快捷键生成"^P"方可有效。
快捷键定义，输入":unmap^P"即可