spring aop是纯java写的。
eclipse安装ajdt插件，该插件包含编译*.aj的编译器。

切点就是那些需要应用切面的方法，这些方法也称为目标方法。
切面就是切点和通知的组合体。
把切面应用到目标函数的过程称为织入(weaving)
在前面定义的HelloWord类中除了sayHello函数外，还有main函数，以后可能还会定义其他函数，
而这些函数都可以称为目标函数，也就是说这些函数执行前后也都可以切入通知的代码，这些目标函数统称为连接点，
切入点(pointcut)的定义正是从这些连接点中过滤出来的。

织入分两种方式：动态织入，静态织入
动态织入的方式是在运行时动态将要增强的代码织入到目标类中，这样往往是通过动态代理技术完成的，
如Java JDK的动态代理(Proxy，底层通过反射实现)或者CGLIB的动态代理(底层通过继承实现)。
静态织入：1.编译时织入，aspectj编译.aj为.class，再编译java代码，在编译的过程中织入。
2.编译后织入，即编译完.aj,.java后，链接时织入。

web项目转成aspectj项目，项目右击config转covert to aspectj
定义切面*.aj类，在类中定义切点，pointcut。
point logPointCut() : execution();
切点表达式：execution(修饰符 返回值 包.类.方法名(参数)throw异常)
修饰符，一般省略:
public 公共
* 任意
返回值，不能省略:
void 
String 返回值字符串
* 任意
包，省略：
com.itheima.crm   固定包
com.itheima.crm.*.service     crm包下面子包任意（例如：com.itheima.crm.staff.service）
com.itheima.crm..             crm包下面的所有子包（含自己）
com.itheima.crm.*.service..   crm包下面任意子包，固定目录service，service目录任意包
类，省略：
UserServiceImpl  指定类
*Impl            以Impl结尾
User*            以User开头
*                任意
方法名，不能省略：
addUser          固定方法
add*             以add开头
*Do              以Do结尾
*                任意
(参数)
()               无参
(int)            一个整型
(int,int)        两个
(..)             参数任意
throws,可省略，一般不写。
通知：
1.before:前置通知(应用：各种校验)
在方法执行前执行，如果通知抛出异常，阻止方法运行。
2.afterReturning:后置通知(应用：常规数据处理)
方法正常返回后执行，如果方法中抛出异常，通知无法执行
必须在方法执行后才执行，所以可以获得方法的返回值。
3.around:环绕通知(应用：十分强大，可以做任何事情)
方法执行前后分别执行，可以阻止方法的执行，必须手动执行目标方法。
个人感觉：在proceed()前后分别执行代码，相当于before，afterReturning的同时调用。
4.afterThrowing:抛出异常通知(应用：包装异常信息)
方法抛出异常后执行，如果方法没有抛出异常，无法执行
5.after:最终通知(应用：清理现场)
方法执行完毕后执行，无论方法中是否出现异常